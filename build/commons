pwd=`pwd`

cleanup_after=true
cleanup_before=true
release_id="main"
export OCHEM_ENV=CDK

export OCHEM_GIT=${OCHEM_GIT:=git@github.com:openochem/ochem-code.git}

if [ -f build.cfg ]; then
	cfg_svn_branch=$(cat build.cfg | grep svn_branch | cut -d'=' -f2)
	cfg_metaserver_branch=$(cat build.cfg | grep metaserver_branch | cut -d'=' -f2)
	cfg_mainwebapp_branch=$(cat build.cfg | grep mainwebapp_branch | cut -d'=' -f2)
	cfg_svn_host=$(cat build.cfg | grep svn_host | cut -d'=' -f2)
	cfg_cleanup_before=$(cat build.cfg | grep cleanup_before | cut -d'=' -f2)
	cfg_cleanup_after=$(cat build.cfg | grep cleanup_after | cut -d'=' -f2)
	cfg_svn_export=$(cat build.cfg | grep svn_export | cut -d'=' -f2)
	cfg_checkout_strategy=$(cat build.cfg | grep checkout_strategy | cut -d'=' -f2)
	cfg_release_id=$(cat build.cfg | grep release_id | cut -d'=' -f2)
	
	if [ ! -z "$cfg_cleanup_before" ]; then
		cleanup_before=$cfg_cleanup_before
	fi
	
	if [ ! -z "$cfg_checkout_strategy" ]; then
		checkout_strategy=$cfg_checkout_strategy
	fi
	
	if [ ! -z "$cfg_cleanup_after" ]; then
		cleanup_after=$cfg_cleanup_after
	fi
	
	
	if [ ! -z "$cfg_release_id" ]; then
		release_id=$cfg_release_id
	fi
	
	if [ ! -z "$cfg_metaserver_branch" ]; then
		echo "Using metaserver branch $cfg_metaserver_branch"
		metaserver_branch=$cfg_metaserver_branch
	fi
	
	if [ ! -z "$cfg_mainwebapp_branch" ]; then
		echo "Using frontend branch $cfg_mainwebapp_branch"
		mainwebapp_branch=$cfg_mainwebapp_branch
	fi
	
fi

local_user_name=`id -un`

#if [ ! -d /tomcat-libs ]; then
#	echo "To run the build, you should have a /tomcat-libs link that points to the tomcat library path" 
#	exit 1
#fi

while getopts "w:d:r:t" optionName; do
case "$optionName" in
d) project_dir="$OPTARG";;
r) release_id="$OPTARG";;
t) force_trunk=true;;
esac
done

if [ ! -z "$release_id" ]; then
	echo "Using release ID" $release_id
	
fi


if [ "$checkout_strategy" == "copy" ]; then
	echo "Using local workspace instead of remote repository"
fi

function checkout
{
	if [ "$checkout_strategy" == "copy" ]; then
		echo "cp -r $pwd/workspace/$1 $2"
		cp -r $pwd/workspace/$1 $2	
	else
		$svn_export $svnhost/$1 $2
	fi
}	

function production_check
{
	# Is maven properly configured? 
	#if [ -z $(cat ~/.m2/settings.xml | grep nexus.ochem.eu) ]; then
	#	echo "Please, configure your maven at ~/.m2/settings.xml"
	#	echo "An exemplary file can be downloaded at http://confluence.qspr.eu/download/attachments/5013506/settings.xml"
	#	exit 1
	#fi

	# Are we allowed to build at this time?
	if [[ ! -z $(cat build.cfg | grep production=1) ]]; then
		hours=$(date +%k)
		if [ "$hours" -lt 19 -a $hours -gt 9 ]; then
			echo "SEVERE: This is a PRODUCTION server. Please, build it only in evening and maximum once per week."
			echo "Use the staging server or your local server for testing and daily builds."
			echo "Exiting."
			exit 1
		fi
		
		if [ -z $release_id ]; then
			echo ""
			echo "SEVERE: This is a production server and you cannot use trunk to build it. Use staging to build from trunk."
			echo "You have to use one of the releases."
			echo "Please, specify the desired release directly using -r key, e.g. ./script_name -r 1.1"
			
			tags=`svn ls svn+ssh://tomcat@qspr/var/svn/qspr-r/tags 2> /dev/null | sed s,/,,g`
			echo ""
			echo "Latest releases: "
			echo $tags
			exit 1
		fi
	fi
}

function local_install_component
{
	cd $1
	mvn clean install	
}

mkdir -p workspace
if [ -d "workspace/git" ]; then
    echo "Workspace exists. Switching..."
else
    mkdir -p workspace/git
    echo "Cloning git repository to workspace and switching..."
    git clone ${OCHEM_GIT} workspace/git/
fi

export WORKSPACE_DIR="$pwd/workspace/git"
cd $WORKSPACE_DIR

if [ "$(ls -A $WORKSPACE_DIR)" ]; then
 echo "Entered Workspace."
else
 git clone ${OCHEM_GIT} . 
fi

if [ "$release_id" != "default" ]; then
    echo "Switching workspace to $release_id"
    git fetch --all
    git checkout $release_id
    git checkout .
    git pull origin $release_id
else
    echo "Using default switch. Switching to trunk..."
    git fetch --all
    git checkout main 
    git pull
    git checkout .
fi

cd $pwd
